{
  "swagger": "2.0",
  "info": {
    "description": "This is the theme parks API spec.",
    "version": "1.0.0",
    "title": "Themepark API",
    "termsOfService": "http://swagger.io/terms/",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "com.themeparks.api",
  "tags": [
    {
      "name": "queue",
      "description": "Operations about queue"
    },
    {
      "name": "reservation",
      "description": "Operations about reservation"
    },
    {
      "name": "schedule",
      "description": "Operations about schedule"
    },
    {
      "name": "user",
      "description": "Operations about users"
    },
    {
      "name": "attraction",
      "description": "Operations about attractions"
    },
    {
      "name": "login",
      "description": "Operations about login"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/attractions": {
      "get": {
        "tags": [
          "attraction"
        ],
        "operationId": "getAttractions",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Attractions"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/reservations": {
      "get": {
        "tags": [
          "reservation"
        ],
        "operationId": "getReservations",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "user account",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Reservations"
            }
          }
        }
      },
      "post": {
        "tags": [
          "reservation"
        ],
        "description": "create new reservations",
        "operationId": "createReservation",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "reservation",
            "schema": {
              "$ref": "#/definitions/Reservations"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Reservations"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "reservation"
        ],
        "description": "delete reservation",
        "operationId": "deleteReservation",
        "parameters": [
          {
            "name": "reservationId",
            "in": "query",
            "description": "id of reservation to delete",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Reservations"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/reservations/confirm": {
      "post": {
        "tags": [
          "reservation"
        ],
        "description": "confirm reservation",
        "operationId": "confirmReservation",
        "parameters": [
          {
            "name": "reservationId",
            "in": "query",
            "description": "id of reservation to confirm",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Reservation"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/queue": {
      "get": {
        "tags": [
          "queue"
        ],
        "operationId": "getCurrentQueue",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Queue"
            }
          }
        }
      }
    },
    "/queue/join": {
      "post": {
        "tags": [
          "queue"
        ],
        "description": "join a queue",
        "operationId": "joinNewQueue",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "queue info",
            "schema": {
              "$ref": "#/definitions/JoinQueueRequest"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Queue"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/queue/quit": {
      "delete": {
        "tags": [
          "queue"
        ],
        "description": "quit from a queue",
        "operationId": "quitQueue",
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "description": "user ID who wants to quit his/her queue.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Queue"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/schedules": {
      "get": {
        "tags": [
          "schedule"
        ],
        "operationId": "getSchedules",
        "parameters": [
          {
            "name": "attractionId",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Schedules"
            }
          }
        }
      },
      "post": {
        "tags": [
          "schedule"
        ],
        "description": "create a new schedule",
        "operationId": "createSchedule",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Schedules"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "schedule"
        ],
        "description": "update a schedule",
        "operationId": "updateSchedule",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Schedules"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "schedule"
        ],
        "description": "delete a schedule",
        "operationId": "deleteSchedule",
        "parameters": [
          {
            "name": "scheduleId",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Schedules"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/schedules/upcomingSchedule": {
      "get": {
        "tags": [
          "schedule"
        ],
        "operationId": "getUpcomingSchedule",
        "parameters": [
          {
            "name": "attractionId",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpcomingSchedule"
            }
          }
        }
      },
      "put": {
        "tags": [
          "schedule"
        ],
        "operationId": "updateUpcomingSchedule",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpcomingSchedule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpcomingSchedule"
            }
          }
        }
      }
    },
    "/account/logout": {
      "post": {
        "description": "log out of the system",
        "operationId": "logout",
        "tags": [
          "login"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "parameters": [],
        "produces": [
          "application/json"
        ]
      },
      "x-swagger-router-controller": "api"
    },
    "/account/login": {
      "post": {
        "tags": [
          "login"
        ],
        "description": "log into the system",
        "operationId": "login",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LoginResult"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-codegen-request-body-name": "body",
        "parameters": [
          {
            "description": "login params",
            "required": true,
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/LoginParams"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      },
      "x-swagger-router-controller": "api"
    },
    "/user": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CurrentUser"
            }
          },
          "400": {
            "description": "Invalid userId supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid userId supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/user/group": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get group of the current user",
        "description": "",
        "operationId": "getUserGroup",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "user account ID that owns the group",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "AddUserToGroup",
        "description": "This can only be done by the logged in user.",
        "operationId": "addUserToGroup",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "user account ID that owns the group",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "user that needs to add to group",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          },
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deletUserFromGroup",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "user account ID that owns the group",
            "required": true,
            "type": "string"
          },
          {
            "name": "userToDelete",
            "in": "query",
            "description": "The user that needs to be deleted from the group",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid userId supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Users": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/User"
      }
    },
    "CurrentUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "notifyCount": {
          "type": "integer",
          "format": "int32"
        },
        "unreadCount": {
          "type": "integer",
          "format": "int32"
        },
        "country": {
          "type": "string"
        },
        "access": {
          "type": "string"
        },
        "geographic": {
          "type": "object",
          "properties": {
            "province": {
              "type": "object",
              "properties": {
                "label": {
                  "type": "string"
                },
                "key": {
                  "type": "string"
                }
              }
            },
            "city": {
              "type": "object",
              "properties": {
                "label": {
                  "type": "string"
                },
                "key": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        }
      }
    },
    "Attractions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Attraction"
      }
    },
    "Attraction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "location": {
          "type": "string"
        }
      }
    },
    "Reservations": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Reservation"
      }
    },
    "Reservation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "attraction": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "schedule": {
          "type": "string"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "location": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "waiting",
            "passed",
            "cancelled",
            "confirmed",
            "checking-in"
          ]
        }
      }
    },
    "Queue": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "numberInQueue": {
          "type": "integer"
        },
        "nextNumberToCall": {
          "type": "integer"
        },
        "attraction": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "eta": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "enum": [
            "waiting",
            "passed",
            "called",
            "confirmed"
          ]
        }
      }
    },
    "JoinQueueRequest": {
      "type": "object",
      "properties": {
        "attraction": {
          "type": "string"
        },
        "users": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ErrorResponse": {
      "required": [
        "errorCode"
      ],
      "type": "object",
      "properties": {
        "errorCode": {
          "type": "string",
          "description": "error code"
        },
        "errorMessage": {
          "type": "string",
          "description": "error message"
        },
        "success": {
          "type": "boolean",
          "description": "success or not"
        }
      }
    },
    "Schedule": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "attraction": {
          "type": "string"
        },
        "totalSeats": {
          "type": "integer"
        },
        "availableSeats": {
          "type": "integer"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "enum": [
            "upcoming",
            "checking-in",
            "post-checkin",
            "completed",
            "cancelled"
          ]
        }
      }
    },
    "Schedules": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Schedule"
      }
    },
    "UpcomingSchedule": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "attraction": {
          "type": "string"
        },
        "totalSeats": {
          "type": "integer"
        },
        "availableSeats": {
          "type": "integer"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "nextNumberToCall": {
          "type": "integer"
        },
        "status": {
          "type": "string",
          "enum": [
            "upcoming",
            "checking-in",
            "post-checkin",
            "completed",
            "cancelled"
          ]
        }
      }
    },
    "LoginResult": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "currentAuthority": {
          "type": "string"
        }
      }
    },
    "LoginParams": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "autoLogin": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        }
      }
    }
  }
}

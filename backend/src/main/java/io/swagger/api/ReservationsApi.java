/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ErrorResponse;
import io.swagger.model.Reservation;
import io.swagger.model.Reservations;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2021-05-21T06:16:38.139Z")

@Validated
@Api(value = "reservations", description = "the reservations API")
@RequestMapping(value = "")
public interface ReservationsApi {

    @ApiOperation(value = "", nickname = "confirmReservation", notes = "confirm reservation", response = Reservation.class, tags={ "reservation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Reservation.class),
        @ApiResponse(code = 401, message = "Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/reservations/confirm",
        method = RequestMethod.POST)
    ResponseEntity<Reservation> confirmReservation(@ApiParam(value = "id of reservation to confirm") @Valid @RequestParam(value = "reservationId", required = false) String reservationId);


    @ApiOperation(value = "", nickname = "createReservation", notes = "create new reservations", response = Reservations.class, tags={ "reservation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Reservations.class),
        @ApiResponse(code = 401, message = "Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/reservations",
        method = RequestMethod.POST)
    ResponseEntity<Reservations> createReservation(@ApiParam(value = "reservation" ,required=true )  @Valid @RequestBody Reservations body);


    @ApiOperation(value = "", nickname = "deleteReservation", notes = "delete reservation", response = Reservations.class, tags={ "reservation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Reservations.class),
        @ApiResponse(code = 401, message = "Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/reservations",
        method = RequestMethod.DELETE)
    ResponseEntity<Reservations> deleteReservation(@NotNull @ApiParam(value = "id of reservation to delete", required = true) @Valid @RequestParam(value = "reservationId", required = true) String reservationId);


    @ApiOperation(value = "", nickname = "getReservations", notes = "", response = Reservations.class, tags={ "reservation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Reservations.class) })
    @RequestMapping(value = "/reservations",
        method = RequestMethod.GET)
    ResponseEntity<Reservations> getReservations(@ApiParam(value = "user account") @Valid @RequestParam(value = "userId", required = false) String userId);

}

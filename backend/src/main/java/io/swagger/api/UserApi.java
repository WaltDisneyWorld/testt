/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.CurrentUser;
import io.swagger.model.User;
import io.swagger.model.Users;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2021-05-21T06:16:38.139Z")

@Validated
@Api(value = "user", description = "the user API")
@RequestMapping(value = "")
public interface UserApi {

    @ApiOperation(value = "AddUserToGroup", nickname = "addUserToGroup", notes = "This can only be done by the logged in user.", response = Users.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Users.class),
        @ApiResponse(code = 400, message = "Invalid user supplied"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/user/group",
        method = RequestMethod.PUT)
    ResponseEntity<Users> addUserToGroup(@NotNull @ApiParam(value = "user account ID that owns the group", required = true) @Valid @RequestParam(value = "userId", required = true) String userId,@ApiParam(value = "user that needs to add to group" ,required=true )  @Valid @RequestBody User body);


    @ApiOperation(value = "Delete user", nickname = "deletUserFromGroup", notes = "This can only be done by the logged in user.", tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Invalid userId supplied"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/user/group",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deletUserFromGroup(@NotNull @ApiParam(value = "user account ID that owns the group", required = true) @Valid @RequestParam(value = "userId", required = true) String userId,@NotNull @ApiParam(value = "The user that needs to be deleted from the group", required = true) @Valid @RequestParam(value = "userToDelete", required = true) String userToDelete);


    @ApiOperation(value = "Delete user", nickname = "deleteUser", notes = "This can only be done by the logged in user.", tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid userId supplied"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/user",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUser(@NotNull @ApiParam(value = "The name that needs to be deleted", required = true) @Valid @RequestParam(value = "userId", required = true) String userId);


    @ApiOperation(value = "Get user by user name", nickname = "getUserByName", notes = "", response = CurrentUser.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CurrentUser.class),
        @ApiResponse(code = 400, message = "Invalid userId supplied"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/user",
        method = RequestMethod.GET)
    ResponseEntity<CurrentUser> getUserByName(@NotNull @ApiParam(value = "The name that needs to be fetched. Use user1 for testing. ", required = true) @Valid @RequestParam(value = "userId", required = true) String userId);


    @ApiOperation(value = "Get group of the current user", nickname = "getUserGroup", notes = "", response = Users.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Users.class) })
    @RequestMapping(value = "/user/group",
        method = RequestMethod.GET)
    ResponseEntity<Users> getUserGroup(@NotNull @ApiParam(value = "user account ID that owns the group", required = true) @Valid @RequestParam(value = "userId", required = true) String userId);


    @ApiOperation(value = "Update user", nickname = "updateUser", notes = "This can only be done by the logged in user.", response = User.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = User.class),
        @ApiResponse(code = 400, message = "Invalid user supplied"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/user",
        method = RequestMethod.PUT)
    ResponseEntity<User> updateUser(@NotNull @ApiParam(value = "name that need to be updated", required = true) @Valid @RequestParam(value = "userId", required = true) String userId,@ApiParam(value = "Updated user object" ,required=true )  @Valid @RequestBody User body);

    @ApiOperation(value = "Create user", nickname = "createUser", notes = "This can only be done by the logged in user.", response = User.class, tags={ "user", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = User.class),
            @ApiResponse(code = 400, message = "Invalid email supplied"),
            @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/user",
            method = RequestMethod.POST)
    ResponseEntity<User> createUser(@ApiParam(value = "Updated user object" ,required=true )  @Valid @RequestBody User body);
}
